set encoding=utf-8
set fileencodings=utf-8,euc-jp,cp932
scriptencoding utf-8

"-------------------------------------------------------------------------------
" システムに関する設定
"-------------------------------------------------------------------------------
set noundofile                                      " undoファイルを作成しない
set noswapfile                                      " swapファイルを作成しない
set nobackup                                        " バックアップファイルを作成しない
set wildmenu                                        " コマンドライン補完するときに強化されたものを使う

"-------------------------------------------------------------------------------
" 外観に関する設定
"-------------------------------------------------------------------------------
syntax on                                           " 構文ハイライト
set laststatus=2                                    " ステータスラインを2行表示
set title                                           " タイトルを表示
set cmdheight=2                                     " コマンドラインの高さ
set showcmd                                         " コマンドをステータス行に表示
set number                                          " 行番号を表示
set list                                            " タブや改行を表示
set listchars=tab:^\ ,trail:\                       " 不可視文字の表示設定
set showtabline=2                                   " タブを表示
set tabstop=4                                       " タブ幅
set shiftwidth=4                                    " シフト(< や >)の数
set nowrap                                          " 画面端で折り返さない
set showmatch                                       " 括弧入力時に対応する括弧を表示
set ambiwidth=double                                " 全角記号のサイズを2byteにする
set foldcolumn=3                                    " foldの表示領域
set previewheight=20                                " previewの高さ
set cursorline                                      " カーソルラインを表示
set scrolloff=6                                     " 縦スクロールの開始位置
set sidescrolloff=16                                " 横スクロールの開始位置
set splitbelow                                      " split時は下に作成
set splitright                                      " vsplit時は右に作成
set whichwrap=b,s,h,l                               " 左右のカーソル移動で行間移動可能にする。

"-------------------------------------------------------------------------------
" 編集に関する設定
"-------------------------------------------------------------------------------
set hidden                                          " 編集中でもバッファを切り替える
set backspace=indent,eol,start                      " バックスペースでインデントや改行を削除できるようにする
set clipboard+=unnamed                              " ヤンクをクリップボードへ送り込む
set expandtab                                       " タブをスペースに展開する

"-------------------------------------------------------------------------------
" 検索に関する設定
"-------------------------------------------------------------------------------
set ignorecase                                      " 検索の大文字小文字の区別をなくす
set smartcase                                       " 大文字小文字の両方が含まれている場合は大文字小文字を区別
set hlsearch                                        " 検索結果ハイライト
set nowrapscan                                      " 検索時にファイルの最後まで行ったら最初に戻らない
set incsearch                                       " インクリメントサーチ

"-------------------------------------------------------------------------------
" パフォーマンスに関する設定
"-------------------------------------------------------------------------------
set synmaxcol=300                                   " syntax highlightingを300文字まで解析

"-------------------------------------------------------------------------------
" 通常(NORMAL)モード時の設定 nmap
"-------------------------------------------------------------------------------
" 一部のキーを無効にする
nnoremap <space> <Nop>                              " プラグインの起動トリガー
nnoremap b <Nop>
nnoremap m <Nop>
nnoremap s <Nop>
nnoremap S <Nop>
nnoremap t <Nop>
nnoremap Q <Nop>
nnoremap Z <Nop>

" 検索ハイライトをクリア
nnoremap <silent> <C-L> :<C-u>nohlsearch<CR>

" <c-w>をsにマッピングする
nmap s <c-w>

" タブ操作
nnoremap tl gt
nnoremap th gT
nnoremap <silent> tL :<C-u>tabm+1<CR>
nnoremap <silent> tH :<C-u>tabm-1<CR>
nnoremap <silent> tn :<C-u>tabnew<CR>
nnoremap <silent> tN :<C-u>$tabnew<CR>
nnoremap <silent> t0 :<C-u>tabm 0<CR>
nnoremap <silent> t$ :<C-u>tabm $<CR>

" バッファ操作
nnoremap <silent> bn :bn<CR>
nnoremap <silent> bp :bp<CR>
nnoremap bb <C-^>

" カーソル位置を変更せずにYで行コピー
nnoremap <silent> Y :<C-u>call Yank_Line()<CR>
function! Yank_Line()
    let pos = getpos(".")
    execute "normal! _y$"
    call setpos('.', pos)
endfunction

" 置き換えは無名レジスタを使用する
nnoremap c "_c
nnoremap C "_C

" 行削除(改行は削除しない)
nnoremap gd _D
nnoremap gD 0D

"カーソル移動
nnoremap gl g$
nnoremap gh g0
nnoremap W B
nnoremap E B

"バッファの強制削除対応
nnoremap <silent> bd :<C-u>call <SID>buf_Delete('0')<CR>
nnoremap <silent> <c-w>q :<C-u>call <SID>buf_Delete('1')<CR>
function! s:buf_Delete(winclose)
    let l:bufNum = bufnr("%")
    let l:ban = ''
    " 編集中の場合は強制削除してよいか確認
    if &mod == 1
        let l:inputtext = input("forcibly remove the buffer? (y[es]|n[o]):")
        if l:inputtext == 'y' || l:inputtext == 'ye' || l:inputtext == 'yes'
            let l:ban = '!'
        else
            echo ("\nBuffer Delete has been canceled")
            return
        endif
    endif

    if a:winclose == '1'
        execute 'bdelete'. l:ban
    else
        " 編集中でない場合もしくは強制削除のみ、次のバッファを表示
        if &mod == 0 || l:ban == '!'
            bprevious
        endif
        execute 'bdelete'. l:ban . ' ' . l:bufNum
    endif
endfunction

" 検索時にimeをoffにする
nnoremap / :<c-u>set imsearch=0<CR>/

" ファイルとバッファの内容でdiff
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
nnoremap <silent> \dd :<C-u>DiffOrig<CR>

" fold移動時にカーソルを中央に移動
nnoremap zk zkzz
nnoremap zj zjzz

"-------------------------------------------------------------------------------
"挿入モード時の設定 imap
"-------------------------------------------------------------------------------
" Ctrl-vで張り付け
inoremap <C-v> <MiddleMouse>

" Ctrl-dでDelete
inoremap <C-d> <Del>

" 挿入モードで計算結果を入力
" inoremap <silent> <C-c> <C-r>=string(eval(input("eval:")))<CR>
inoremap <expr> <C-c> string(eval(input("eval:")))

" expandtab時にもタブを入力できる様にする
inoremap <C-t> <C-v><C-i>

" カーソル移動
inoremap <C-a> <HOME>
inoremap <C-e> <END>
inoremap <C-b> <LEFT>
inoremap <c-f> <RIGHT>

"-------------------------------------------------------------------------------
"VISUALモード時の設定 xmap
"-------------------------------------------------------------------------------
" 選択中の貼り付けは、クリップボードを変更しない
" vモードの置換連続ペースト用
xnoremap <silent> p :<C-u>call Put_text_without_override_register()<CR>
xnoremap <silent> P :<C-u>call Put_text_without_override_register()<CR>

function! Put_text_without_override_register()

    " 選択範囲の末尾の位置を取得
    let sel_start_line = line('''<')

    " 選択範囲の末尾の位置を取得
    let sel_col = col('''>')
    let sel_end_line = line('''>')

    " 行末に移動した場合の位置を取得
    execute "normal! $"
    let end_col = col('.')

    " 選択範囲を削除(消去レジスタを使用)
    execute 'normal! gv"_x'

    " 行末の場合
    if sel_col == end_col && sel_start_line == sel_end_line
        execute 'normal! p'
    else
        execute 'normal! P'
    endif

endfunction

" インデントを統一
xnoremap = >gv<`j

" 選択時に.で範囲内で前回コマンドを実行
xnoremap <silent> . :<C-u>'<,'>normal .<CR>

"-------------------------------------------------------------------------------
"コマンドモード時の設定 cmap
"-------------------------------------------------------------------------------
" <C-V>で張り付け
cnoremap <C-v> <C-R>*

" 制御文字を表す場合
cnoremap <C-\> <C-v>

" コマンド履歴参照
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" カーソル移動
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>

" ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
" プラグインの読込み
" ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

" 以下のコマンドでインストールする
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" gvimで起動時にplug#beginが未定義となる場合は、以下が必要
" cd /d %homepath%
" mklink /j vimfiles .vim
" Then reload .vimrc and :PlugInstall to install plugins.

call plug#begin('~/.vim/plugged')
Plug 'w0ng/vim-hybrid'
Plug 'haya14busa/vim-asterisk'
Plug 'Lokaltog/vim-easymotion'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tomtom/tcomment_vim'
Plug 'thinca/vim-zenspace'
Plug 'deris/vim-diffbuf'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'thinca/vim-singleton'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'Shougo/neocomplete.vim'
Plug 'mattn/emmet-vim'
call plug#end()

"-------------------------------------------------------------------------------
"vim-hybridの設定
"-------------------------------------------------------------------------------
set background=dark
colorscheme hybrid

"-------------------------------------------------------------------------------
"vim-asteriskの設定
"-------------------------------------------------------------------------------
map g*  <Plug>(asterisk-z*)
map g#  <Plug>(asterisk-z#)
map * <Plug>(asterisk-gz*)
map # <Plug>(asterisk-gz#)

"-------------------------------------------------------------------------------
"vim-easymotionの設定
"-------------------------------------------------------------------------------
" デフォルトのマッピングを使用しない
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
map m <Plug>(easymotion-s)
map f <Plug>(easymotion-fl)
map F <Plug>(easymotion-Fl)
noremap sf f
noremap sF F

"-------------------------------------------------------------------------------
"vim-better-whitespaceの設定
"-------------------------------------------------------------------------------
highlight ExtraWhitespace guibg=darkcyan

"-------------------------------------------------------------------------------
"tcomment_vimの設定
"-------------------------------------------------------------------------------
" コメント形式を追加
call tcomment#type#Define('crs', '/* %s */')

"-------------------------------------------------------------------------------
"vim-diffbufの設定
"-------------------------------------------------------------------------------
" 空白無視
set diffopt=iwhite

" mapping
nnoremap <silent> \df :<C-u>DiffBuf<CR>

"-------------------------------------------------------------------------------
"nerdtreeの設定
"-------------------------------------------------------------------------------
let g:nerdtree_tabs_open_on_gui_startup = 0
let NERDTreeWinSize=50
" 表示しないファイルを設定(正規表現)
let NERDTreeIgnore=['CVS$[[dir]]', '\~$']

" mapping
nnoremap <silent> <space>e :<C-u>call <SID>open_NERDTree()<CR>
function! s:open_NERDTree()
    if bufname("%") == ''
        cd $HOME
    else
        cd %:h
    endif
    silent exe 'NERDTreeToggle'
endfunction

"-------------------------------------------------------------------------------
"ctrlp.vimの設定
"-------------------------------------------------------------------------------
" オプション
let g:ctrlp_extensions = ['line', 'mixed']
let g:ctrlp_map = '<NOP>'
let g:ctrlp_match_window = 'bottom,order:ttb,min:20,max:20'
let g:ctrlp_tabpage_position = 'a'
let g:ctrlp_open_new_file = 't'

" マッピング
nnoremap <silent> <space>b :<C-u>CtrlPBuffer<CR>
nnoremap <silent> <space>f :<C-u>CtrlPCurFile<CR>
nnoremap <silent> <space>m :<C-u>CtrlPMRU<CR>
nnoremap <silent> <space>l :<C-u>CtrlPLine<CR>
nnoremap <silent> <space>p :<C-u>CtrlPMixed<CR>

"-------------------------------------------------------------------------------
"vim-singletonの設定
"-------------------------------------------------------------------------------
if has('clientserver')
    call singleton#enable()
endif


"-------------------------------------------------------------------------------
"lightline.vimの設定
"-------------------------------------------------------------------------------
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'gitbranch' ],
            \             [ 'readonly', 'filename', 'modified' ] ]
            \ },
            \ 'component_function': {
            \   'gitbranch': 'Git_branch_view'
            \ },
            \ }

function! g:Git_branch_view()

    try
        let val = fugitive#head()
        if val == ""
            return ""
        else
            return "[branch: " . val . "]"
        endif
    catch
        return ""
    endtry

endfunction

"-------------------------------------------------------------------------------
"neocomplete.vimの設定
"-------------------------------------------------------------------------------
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Use head match instead of default fuzzy match.
let g:neocomplete#enable_fuzzy_completion = 0

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions',
            \ 'sql' : $HOME.'/vimfiles/dictionary/sql.dict'
            \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"-------------------------------------------------------------------------------
"mattn/emmet-vimの設定
"-------------------------------------------------------------------------------
let g:user_emmet_settings = {
            \    'variables' : {
            \        'lang' : 'ja',
            \    },
            \    'html' : {
            \        'expandos' : {
            \            'ol': 'ol>li',
            \            'ul': 'ul>li',
            \            'table': 'table>(thead>tr>th)+(tbody>tr>td)'
            \        },
            \        'snippets' : {
            \            'js' : "<script src='${cursor}'></script>",
            \            'css' : "<link rel='stylesheet' href='${cursor}'></link>",
            \        },
            \    },
            \    'javascript' : {
            \        'snippets' : {
            \            'log' : "console.log(${cursor});",
            \        },
            \    },
            \    'sql' : {
            \        'snippets' : {
            \            'sel' : "SELECT\nFROM\n\t${cursor}\nWHERE",
            \            'upd' : "UPDATE\n\t${cursor}\nSET\nWHERE",
            \            'del' : "DELETE\n\t${cursor}\nWHERE",
            \            'to_d' : "TO_DATE('${cursor}', 'YYYY/MM/DD')",
            \            'to_t' : "TO_DATE('${cursor}', 'YYYY/MM/DD HH24:MI:SS')",
            \            'join' : "INNER JOIN ${cursor}",
            \            'ljoin' : "LEFT OUTER JOIN ${cursor}",
            \            'bw' : "TRUNC(SYSDATE) BETWEEN ${cursor}",
            \        },
            \    },
            \}



